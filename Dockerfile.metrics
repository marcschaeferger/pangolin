FROM node:22-alpine AS builder

WORKDIR /app

ARG BUILD=oss
# Force sqlite for metrics stack
ENV DATABASE=sqlite

COPY package*.json ./
RUN npm ci
# Upgrade OpenTelemetry libs to versions that support MetricReader API
RUN npm i --no-save @opentelemetry/api@^1.8.0 @opentelemetry/sdk-metrics@^1.26.0 @opentelemetry/exporter-prometheus@^0.52.0 @opentelemetry/exporter-metrics-otlp-grpc@^0.52.0

COPY . .

# Force DB module to sqlite for build
RUN echo "export * from \"./sqlite\";" > server/db/index.ts
RUN echo "export const build = \"$BUILD\" as any;" > server/build.ts

# Generate drizzle schema for sqlite
RUN npx drizzle-kit generate --dialect sqlite --schema ./server/db/sqlite/schema.ts --out init

# Build sqlite flavor
RUN npm run build:sqlite
RUN npm run build:cli

FROM node:22-alpine AS runner

WORKDIR /app

# Curl used for the health checks
RUN apk add --no-cache curl

# Reuse node_modules from builder to ensure matching OpenTelemetry versions
COPY --from=builder /app/node_modules ./node_modules
COPY package*.json ./
# No npm ci in runner; dependencies are vendored via standalone + copied node_modules

COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/init ./dist/init

COPY ./cli/wrapper.sh /usr/local/bin/pangctl
RUN chmod +x /usr/local/bin/pangctl ./dist/cli.mjs

COPY server/db/names.json ./dist/names.json
COPY public ./public

CMD ["npm", "run", "start"]
